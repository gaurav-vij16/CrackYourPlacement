/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    
    struct comp{
      bool operator()(ListNode* a , ListNode* b){
          return a->val > b->val;
      }  
    };
    
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        
        priority_queue<ListNode*,vector<ListNode*>, comp> pq;;
        
        for(int i = 0;i < lists.size();i++){
            if(lists[i] != NULL)
            pq.push(lists[i]);
        }
        
        ListNode* dummy = new ListNode(-1);
        ListNode* temp = dummy;
        
        while (!pq.empty()) {
        ListNode* top = pq.top();
        pq.pop();
        temp->next = top;
        temp = temp->next;

        if (top->next != nullptr) {
            pq.push(top->next);
        }
    }

    ListNode* result = dummy->next;
    delete dummy; // Free the dummy node to avoid memory leak
    return result;
    }
};

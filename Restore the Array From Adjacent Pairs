class Solution {
public:
    
    void dfs(unordered_map<int, vector<int>>& mp , int src , int prev , vector<int>& ans){
        ans.push_back(src);
        
        for(auto i : mp[src]){
           if(i != prev){
               dfs(mp , i , src , ans);
           } 
        }
    }
    
    vector<int> restoreArray(vector<vector<int>>& arr) {
        unordered_map<int, vector<int>> adj;
        
        for(int i = 0;i < arr.size() ; i++){
            adj[arr[i][0]].push_back(arr[i][1]);
            adj[arr[i][1]].push_back(arr[i][0]);
        }
        
        vector<int> ans;
        int src = -1;
        for(auto& i : adj){
            if(i.second.size() == 1){
                src = i.first;
                break;
            }
        }
        
        dfs(adj , src , INT_MIN , ans);
        return ans;
    }
};
